#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define TOP_N 10

// Frequency of letters in English (approximate)
const double english_freq[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153, 
    0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.317, 9.056, 
    2.758, 0.978, 2.560, 0.150, 1.929, 0.074, 1.607, 0.000 // Frequencies of a-z
};

// Function to calculate the frequency of each letter in the ciphertext
void calculate_frequency(const char *ciphertext, double *frequency) {
    int count[ALPHABET_SIZE] = {0};
    int length = strlen(ciphertext);

    for (int i = 0; i < length; i++) {
        if (isalpha(ciphertext[i])) {
            int index = tolower(ciphertext[i]) - 'a';
            count[index]++;
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        frequency[i] = (double)count[i] / length * 100;
    }
}

// Function to print possible plaintexts based on letter frequency
void print_possible_plaintexts(const char *ciphertext, const double *frequency) {
    char plaintext[strlen(ciphertext) + 1];
    double best_score = 1e9; // Arbitrarily large number
    char best_plaintexts[TOP_N][strlen(ciphertext) + 1];
    int count = 0;

    // Generate possible plaintexts by trying all possible shifts
    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        double score = 0.0;

        // Decrypt ciphertext with the current shift
        for (int i = 0; i < strlen(ciphertext); i++) {
            if (isalpha(ciphertext[i])) {
                int index = (tolower(ciphertext[i]) - 'a' - shift + ALPHABET_SIZE) % ALPHABET_SIZE;
                plaintext[i] = (isupper(ciphertext[i]) ? 'A' : 'a') + index;
            } else {
                plaintext[i] = ciphertext[i];
            }
        }
        plaintext[strlen(ciphertext)] = '\0';

        // Calculate score based on letter frequency comparison
        int temp_count[ALPHABET_SIZE] = {0};
        for (int i = 0; i < strlen(plaintext); i++) {
            if (isalpha(plaintext[i])) {
                int index = tolower(plaintext[i]) - 'a';
                temp_count[index]++;
            }
        }

        double temp_freq[ALPHABET_SIZE];
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            temp_freq[i] = (double)temp_count[i] / strlen(plaintext) * 100;
        }

        for (int i = 0; i < ALPHABET_SIZE; i++) {
            score += fabs(temp_freq[i] - english_freq[i]);
        }

        // Store the top N possible plaintexts
        if (score < best_score) {
            best_score = score;
            snprintf(best_plaintexts[count++], sizeof(best_plaintexts[0]), "%s", plaintext);

            if (count >= TOP_N) {
                break;
            }
        }
    }

    // Print the top N possible plaintexts
    printf("Top %d possible plaintexts:\n", TOP_N);
    for (int i = 0; i < count; i++) {
        printf("%d: %s\n", i + 1, best_plaintexts[i]);
    }
}

int main() {
    char ciphertext[1000];
    double frequency[ALPHABET_SIZE];

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove trailing newline

    // Calculate the frequency of letters in the ciphertext
    calculate_frequency(ciphertext, frequency);

    // Print possible plaintexts based on frequency analysis
    print_possible_plaintexts(ciphertext, frequency);

    return 0;
}
