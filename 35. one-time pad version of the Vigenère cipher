#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// Encrypts or decrypts a single character with the given shift
char shift_char(char c, int shift, int encrypt) {
    if (isalpha(c)) {
        char base = isupper(c) ? 'A' : 'a';
        int offset = c - base;
        if (encrypt) {
            offset = (offset + shift) % ALPHABET_SIZE;
        } else {
            offset = (offset - shift + ALPHABET_SIZE) % ALPHABET_SIZE;
        }
        return base + offset;
    }
    return c;
}

// Encrypts or decrypts the entire text with the given key
void vigenere_cipher(const char *text, const int *key, size_t key_len, char *output, int encrypt) {
    size_t text_len = strlen(text);
    for (size_t i = 0; i < text_len; i++) {
        output[i] = shift_char(text[i], key[i % key_len], encrypt);
    }
    output[text_len] = '\0';
}

int main() {
    // Example key and plaintext
    const char *plaintext = "HELLO WORLD";
    int key[] = {3, 19, 5}; // Example key (shift values)
    size_t key_len = sizeof(key) / sizeof(key[0]);

    // Output buffers
    char encrypted_text[strlen(plaintext) + 1];
    char decrypted_text[strlen(plaintext) + 1];

    // Encrypt the plaintext
    vigenere_cipher(plaintext, key, key_len, encrypted_text, 1);
    printf("Encrypted text: %s\n", encrypted_text);

    // Decrypt the ciphertext
    vigenere_cipher(encrypted_text, key, key_len, decrypted_text, 0);
    printf("Decrypted text: %s\n", decrypted_text);

    return 0;
}
