#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

#define ALPHABET_SIZE 26
#define TOP_N 10

// Frequency of letters in English (approximate)
const double english_freq[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
    0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.317, 9.056,
    2.758, 0.978, 2.560, 0.150, 1.929, 0.074, 1.607, 0.000 // Frequencies of a-z
};

// Function to calculate the frequency of each letter in the ciphertext
void calculate_frequency(const char *ciphertext, double *frequency) {
    int count[ALPHABET_SIZE] = {0};
    int length = strlen(ciphertext);

    for (int i = 0; i < length; i++) {
        if (isalpha(ciphertext[i])) {
            int index = tolower(ciphertext[i]) - 'a';
            count[index]++;
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        frequency[i] = (double)count[i] / length * 100;
    }
}

// Function to calculate the score of a plaintext based on letter frequency
double calculate_score(const double *plaintext_freq) {
    double score = 0.0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        score += fabs(plaintext_freq[i] - english_freq[i]);
    }
    return score;
}

// Function to generate and score possible plaintexts
void generate_plaintexts(const char *ciphertext, double *cipher_freq) {
    char best_plaintexts[TOP_N][strlen(ciphertext) + 1];
    double best_scores[TOP_N];
    for (int i = 0; i < TOP_N; i++) {
        best_scores[i] = 1e9; // Initialize with large values
    }

    char current_plaintext[strlen(ciphertext) + 1];
    double current_freq[ALPHABET_SIZE];
    
    // Try all possible substitutions
    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        // Generate plaintext by shifting letters
        for (int i = 0; i < strlen(ciphertext); i++) {
            if (isalpha(ciphertext[i])) {
                int index = (tolower(ciphertext[i]) - 'a' - shift + ALPHABET_SIZE) % ALPHABET_SIZE;
                current_plaintext[i] = (isupper(ciphertext[i]) ? 'A' : 'a') + index;
            } else {
                current_plaintext[i] = ciphertext[i];
            }
        }
        current_plaintext[strlen(ciphertext)] = '\0';
        
        // Calculate frequency of the current plaintext
        int temp_count[ALPHABET_SIZE] = {0};
        for (int i = 0; i < strlen(current_plaintext); i++) {
            if (isalpha(current_plaintext[i])) {
                int index = tolower(current_plaintext[i]) - 'a';
                temp_count[index]++;
            }
        }
        
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            current_freq[i] = (double)temp_count[i] / strlen(current_plaintext) * 100;
        }
        
        // Score the current plaintext
        double score = calculate_score(current_freq);
        
        // Update the list of top N plaintexts
        for (int i = 0; i < TOP_N; i++) {
            if (score < best_scores[i]) {
                for (int j = TOP_N - 1; j > i; j--) {
                    best_scores[j] = best_scores[j - 1];
                    strcpy(best_plaintexts[j], best_plaintexts[j - 1]);
                }
                best_scores[i] = score;
                strcpy(best_plaintexts[i], current_plaintext);
                break;
            }
        }
    }
    
    // Print the top N possible plaintexts
    printf("Top %d possible plaintexts:\n", TOP_N);
    for (int i = 0; i < TOP_N; i++) {
        if (best_scores[i] < 1e9) {
            printf("%d: %s\n", i + 1, best_plaintexts[i]);
        }
    }
}

int main() {
    char ciphertext[1000];
    double frequency[ALPHABET_SIZE];

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove trailing newline

    // Calculate the frequency of letters in the ciphertext
    calculate_frequency(ciphertext, frequency);

    // Generate and print possible plaintexts based on frequency analysis
    generate_plaintexts(ciphertext, frequency);

    return 0;
}
